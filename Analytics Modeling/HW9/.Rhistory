ggroc(ROC) + theme_dark() + ggtitle('ROC')
print(paste('AUC: ', auc(ROC)))
test_predict <- ifelse(test_predict > 0.3, 1, 0)
confusionMatrix(test_predict, test$V21)
test_predict <- predict(gc_model, newdata = test[,1:20], type ='response')
ROC <- roc(test$V21, test_predict)
ggroc(ROC) + theme_dark() + ggtitle('ROC')
print(paste('AUC: ', auc(ROC)))
test_predict <- ifelse(test_predict > 0.3, 1, 0)
confusionMatrix(test_predict, as.factor(test$V21))
test_predict <- predict(gc_model, newdata = test[,1:20], type ='response')
ROC <- roc(test$V21, test_predict)
ggroc(ROC) + theme_dark() + ggtitle('ROC')
print(paste('AUC: ', auc(ROC)))
test_predict <- ifelse(test_predict > 0.3, 1, 0)
confusionMatrix(test_predict, as.factor(as.matrix(test$V21)))
test$V21
as.factor(test$V21)
test_predict <- predict(gc_model, newdata = test[,1:20], type ='response')
ROC <- roc(test$V21, test_predict)
ggroc(ROC) + theme_dark() + ggtitle('ROC')
print(paste('AUC: ', auc(ROC)))
test_predict <- ifelse(test_predict > 0.3, 2, 1)
confusionMatrix(test_predict, as.factor(as.matrix(test$V21)))
test_predict <- predict(gc_model, newdata = test[,1:20], type ='response')
ROC <- roc(test$V21, test_predict)
ggroc(ROC) + theme_dark() + ggtitle('ROC')
print(paste('AUC: ', auc(ROC)))
test_predict <- ifelse(test_predict > 0.3, 2, 1)
confusionMatrix(test_predict, as.factor(test$V21))
as.factor(test$V21)
test_predict
test_predict
length(test_predict)
length(test)
length(test[,21])
typeof(test_predict)
typeof(test)
test_predict <- predict(gc_model, newdata = test[,1:20], type ='response')
ROC <- roc(test$V21, test_predict)
ggroc(ROC) + theme_dark() + ggtitle('ROC')
print(paste('AUC: ', auc(ROC)))
test_predict <- ifelse(test_predict > 0.3, 2, 1)
confusionMatrix(test_predict, test$V21)
test_predict <- predict(gc_model, newdata = test[,1:20], type ='response')
ROC <- roc(test$V21, test_predict)
ggroc(ROC) + theme_dark() + ggtitle('ROC')
print(paste('AUC: ', auc(ROC)))
test_predict <- ifelse(test_predict > 0.3, 2, 1)
confusionMatrix(as.factor(test_predict), as.factor(test$V21))
test_predict <- predict(gc_model, newdata = test[,1:20], type ='response')
ROC <- roc(test$V21, test_predict)
ggroc(ROC) + theme_dark() + ggtitle('ROC')
print(paste('AUC: ', auc(ROC)))
test_predict <- ifelse(test_predict > 0.5, 2, 1)
confusionMatrix(as.factor(test_predict), as.factor(test$V21))
test_predict <- predict(gc_model, newdata = test[,1:20], type ='response')
ROC <- roc(test$V21, test_predict)
ggroc(ROC) + theme_dark() + ggtitle('ROC')
print(paste('AUC: ', auc(ROC)))
test_predict <- ifelse(test_predict > 0.5, 2, 1)
confusionMatrix(as.factor(test_predict), as.factor(test$V21), positive = 2)
test_predict <- predict(gc_model, newdata = test[,1:20], type ='response')
ROC <- roc(test$V21, test_predict)
ggroc(ROC) + theme_dark() + ggtitle('ROC')
print(paste('AUC: ', auc(ROC)))
test_predict <- ifelse(test_predict > 0.5, 2, 1)
confusionMatrix(as.factor(test_predict), as.factor(test$V21), positive = '2')
train_final <- train[, c(1,2,3,4,6,7,9,14,20,21)]
test_final <- test[, c(1,2,3,4,6,7,9,14,20,21)]
final_model <- glm(V21 ~., family = binomial(link='logit'), data = train_final)
summary(final_model)
final_predict <- predict(gc_model, newdata = test_final[,c(1,2,3,4,6,7,9,14,20)], type ='response')
View(test_final)
train_final <- train[, c(1,2,3,4,6,7,9,14,20,21)]
test_final <- test[, c(1,2,3,4,6,7,9,14,20,21)]
final_model <- glm(V21 ~., family = binomial(link='logit'), data = train_final)
summary(final_model)
final_predict <- predict(gc_model, newdata = test_final[,-V21], type ='response')
train_final <- train[, c(1,2,3,4,6,7,9,14,20,21)]
test_final <- test[, c(1,2,3,4,6,7,9,14,20,21)]
final_model <- glm(V21 ~., family = binomial(link='logit'), data = train_final)
summary(final_model)
final_predict <- predict(gc_model, newdata = test_final[-V21], type ='response')
train_final <- train[, c(1,2,3,4,6,7,9,14,20,21)]
test_final <- test[, c(1,2,3,4,6,7,9,14,20,21)]
final_model <- glm(V21 ~., family = binomial(link='logit'), data = train_final)
summary(final_model)
final_predict <- predict(gc_model, newdata = test_final[-V21], type ='response')
train_final <- train[, c(1,2,3,4,6,7,9,14,20,21)]
test_final <- test[, c(1,2,3,4,6,7,9,14,20,21)]
final_model <- glm(V21 ~., family = binomial(link='logit'), data = train_final)
summary(final_model)
final_predict <- predict(gc_model, newdata = test_final[,c(1,2,3,4,5,6,7,8,9)], type ='response')
train_final <- train[, c(1,2,3,4,6,7,9,14,20,21)]
test_final <- test[, c(1,2,3,4,6,7,9,14,20,21)]
final_model <- glm(V21 ~., family = binomial(link='logit'), data = train_final)
summary(final_model)
final_predict <- predict(gc_model, newdata = test_final, type ='response')
train_final <- train[, c(1,2,3,4,6,7,9,14,20,21)]
test_final <- test[, c(1,2,3,4,6,7,9,14,20,21)]
final_model <- glm(V21 ~., family = binomial(link='logit'), data = train_final)
summary(final_model)
final_predict <- predict(final_model, newdata = test_final, type ='response')
final_ROC <- roc(test_final$V21, final_predict)
ggroc(final_ROC) + theme_dark() + ggtitle('ROC')
print(paste('AUC: ', auc(ROC)))
final_predict <- ifelse(final_predict > 0.5, 2, 1)
confusionMatrix(as.factor(final_predict), as.factor(test_final$V21), positive = '2')
train_final <- train[, c(1,2,3,4,6,7,9,14,20,21)]
test_final <- test[, c(1,2,3,4,6,7,9,14,20,21)]
final_model <- glm(V21 ~., family = binomial(link='logit'), data = train_final)
summary(final_model)
final_predict <- predict(final_model, newdata = test_final, type ='response')
final_ROC <- roc(test_final$V21, final_predict)
ggroc(final_ROC) + theme_dark() + ggtitle('ROC')
print(paste('AUC: ', auc(ROC)))
final_predict <- ifelse(final_predict > 0.3, 2, 1)
confusionMatrix(as.factor(final_predict), as.factor(test_final$V21), positive = '2')
train_final <- train[, c(1,2,3,4,6,7,9,14,20,21)]
test_final <- test[, c(1,2,3,4,6,7,9,14,20,21)]
final_model <- glm(V21 ~., family = binomial(link='logit'), data = train_final)
summary(final_model)
final_predict <- predict(final_model, newdata = test_final, type ='response')
final_ROC <- roc(test_final$V21, final_predict)
ggroc(final_ROC) + theme_dark() + ggtitle('ROC')
print(paste('AUC: ', auc(ROC)))
final_predict <- ifelse(final_predict > 0.5, 2, 1)
confusionMatrix(as.factor(final_predict), as.factor(test_final$V21), positive = '2')
train_final <- train[, c(1,2,3,4,6,7,9,14,20,21)]
test_final <- test[, c(1,2,3,4,6,7,9,14,20,21)]
final_model <- glm(V21 ~., family = binomial(link='logit'), data = train_final)
summary(final_model)
final_predict <- predict(final_model, newdata = test_final, type ='response')
final_ROC <- roc(test_final$V21, final_predict)
ggroc(final_ROC) + theme_dark() + ggtitle('ROC')
print(paste('AUC: ', auc(ROC)))
final_predict <- ifelse(final_predict > 0.6, 2, 1)
confusionMatrix(as.factor(final_predict), as.factor(test_final$V21), positive = '2')
test_predict <- predict(gc_model, newdata = test[,1:20], type ='response')
ROC <- roc(test$V21, test_predict)
ggroc(ROC) + theme_dark() + ggtitle('ROC')
print(paste('AUC: ', auc(ROC)))
test_predict <- ifelse(test_predict > 0.6, 2, 1)
confusionMatrix(as.factor(test_predict), as.factor(test$V21), positive = '2')
train_final <- train[, c(1,2,3,4,6,7,9,14,20,21)]
test_final <- test[, c(1,2,3,4,6,7,9,14,20,21)]
final_model <- glm(V21 ~., family = binomial(link='logit'), data = train_final)
summary(final_model)
final_predict <- predict(final_model, newdata = test_final, type ='response')
final_ROC <- roc(test_final$V21, final_predict)
ggroc(final_ROC) + theme_dark() + ggtitle('ROC')
print(paste('AUC: ', auc(ROC)))
final_predict <- ifelse(final_predict > 0.7, 2, 1)
confusionMatrix(as.factor(final_predict), as.factor(test_final$V21), positive = '2')
train_final <- train[, c(1,2,3,4,6,7,9,14,20,21)]
test_final <- test[, c(1,2,3,4,6,7,9,14,20,21)]
final_model <- glm(V21 ~., family = binomial(link='logit'), data = train_final)
final_predict <- predict(final_model, newdata = test_final, type ='response')
final_ROC <- roc(test_final$V21, final_predict)
ggroc(final_ROC) + theme_dark() + ggtitle('ROC')
print(paste('AUC: ', auc(ROC)))
final_predict <- ifelse(final_predict > 0.7, 2, 1)
confusionMatrix(as.factor(final_predict), as.factor(test_final$V21), positive = '2')
train_final <- train[, c(1,2,3,4,6,7,9,14,20,21)]
test_final <- test[, c(1,2,3,4,6,7,9,14,20,21)]
final_model <- glm(V21 ~., family = binomial(link='logit'), data = train_final)
final_predict <- predict(final_model, newdata = test_final, type ='response')
final_ROC <- roc(test_final$V21, final_predict)
ggroc(final_ROC) + theme_dark() + ggtitle('ROC')
print(paste('AUC: ', auc(ROC)))
final_predict <- ifelse(final_predict > 0.5, 2, 1)
confusionMatrix(as.factor(final_predict), as.factor(test_final$V21), positive = '2')
train_final <- train[, c(1,2,3,4,6,7,9,14,20,21)]
test_final <- test[, c(1,2,3,4,6,7,9,14,20,21)]
final_model <- glm(V21 ~., family = binomial(link='logit'), data = train_final)
final_predict <- predict(final_model, newdata = test_final, type ='response')
final_ROC <- roc(test_final$V21, final_predict)
ggroc(final_ROC) + theme_dark() + ggtitle('ROC')
print(paste('AUC: ', auc(ROC)))
final_predict <- ifelse(final_predict > 0.7, 2, 1)
confusionMatrix(as.factor(final_predict), as.factor(test_final$V21), positive = '2')
train_final <- train[, c(1,2,3,4,6,7,9,14,20,21)]
test_final <- test[, c(1,2,3,4,6,7,9,14,20,21)]
final_model <- glm(V21 ~., family = binomial(link='logit'), data = train_final)
final_predict <- predict(final_model, newdata = test_final, type ='response')
final_ROC <- roc(test_final$V21, final_predict)
ggroc(final_ROC) + theme_dark() + ggtitle('ROC')
print(paste('AUC: ', auc(ROC)))
final_predict <- ifelse(final_predict > 0.8, 2, 1)
confusionMatrix(as.factor(final_predict), as.factor(test_final$V21), positive = '2')
train_final <- train[, c(1,2,3,4,6,7,9,14,20,21)]
test_final <- test[, c(1,2,3,4,6,7,9,14,20,21)]
final_model <- glm(V21 ~., family = binomial(link='logit'), data = train_final)
final_predict <- predict(final_model, newdata = test_final, type ='response')
final_ROC <- roc(test_final$V21, final_predict)
ggroc(final_ROC) + theme_dark() + ggtitle('ROC')
print(paste('AUC: ', auc(ROC)))
final_predict <- ifelse(final_predict > 0.8, 1, 2)
confusionMatrix(as.factor(final_predict), as.factor(test_final$V21), positive = '2')
train_final <- train[, c(1,2,3,4,6,7,9,14,20,21)]
test_final <- test[, c(1,2,3,4,6,7,9,14,20,21)]
final_model <- glm(V21 ~., family = binomial(link='logit'), data = train_final)
final_predict <- predict(final_model, newdata = test_final, type ='response')
final_ROC <- roc(test_final$V21, final_predict)
ggroc(final_ROC) + theme_dark() + ggtitle('ROC')
print(paste('AUC: ', auc(ROC)))
final_predict <- ifelse(final_predict > 0.8, 1, 2)
confusionMatrix(as.factor(final_predict), as.factor(test_final$V21), positive = '1')
train_final <- train[, c(1,2,3,4,6,7,9,14,20,21)]
test_final <- test[, c(1,2,3,4,6,7,9,14,20,21)]
final_model <- glm(V21 ~., family = binomial(link='logit'), data = train_final)
final_predict <- predict(final_model, newdata = test_final, type ='response')
final_ROC <- roc(test_final$V21, final_predict)
ggroc(final_ROC) + theme_dark() + ggtitle('ROC')
print(paste('AUC: ', auc(ROC)))
final_predict <- ifelse(final_predict > 0.8, 2, 1)
confusionMatrix(as.factor(final_predict), as.factor(test_final$V21), positive = '2')
train_final <- train[, c(1,2,3,4,6,7,9,14,20,21)]
test_final <- test[, c(1,2,3,4,6,7,9,14,20,21)]
final_model <- glm(V21 ~., family = binomial(link='logit'), data = train_final)
final_predict <- predict(final_model, newdata = test_final, type ='response')
final_ROC <- roc(test_final$V21, final_predict)
ggroc(final_ROC) + theme_dark() + ggtitle('ROC')
print(paste('AUC: ', auc(ROC)))
final_predict <- ifelse(final_predict > 0.3, 2, 1)
confusionMatrix(as.factor(final_predict), as.factor(test_final$V21), positive = '2')
train_final <- train[, c(1,2,3,4,6,7,9,14,20,21)]
test_final <- test[, c(1,2,3,4,6,7,9,14,20,21)]
final_model <- glm(V21 ~., family = binomial(link='logit'), data = train_final)
final_predict <- predict(final_model, newdata = test_final, type ='response')
final_ROC <- roc(test_final$V21, final_predict)
ggroc(final_ROC) + theme_dark() + ggtitle('ROC')
print(paste('AUC: ', auc(ROC)))
final_predict <- ifelse(final_predict > 0.8, 2, 1)
confusionMatrix(as.factor(final_predict), as.factor(test_final$V21), positive = '2')
train_final <- train[, c(1,2,3,4,6,7,9,14,20,21)]
test_final <- test[, c(1,2,3,4,6,7,9,14,20,21)]
final_model <- glm(V21 ~., family = binomial(link='logit'), data = train_final)
final_predict <- predict(final_model, newdata = test_final, type ='response')
final_ROC <- roc(test_final$V21, final_predict)
ggroc(final_ROC) + theme_dark() + ggtitle('ROC')
print(paste('AUC: ', auc(ROC)))
final_predict <- ifelse(final_predict > 0.8, 1, 2)
confusionMatrix(as.factor(final_predict), as.factor(test_final$V21), positive = '1')
train_final <- train[, c(1,2,3,4,6,7,9,14,20,21)]
test_final <- test[, c(1,2,3,4,6,7,9,14,20,21)]
final_model <- glm(V21 ~., family = binomial(link='logit'), data = train_final)
final_predict <- predict(final_model, newdata = test_final, type ='response')
final_ROC <- roc(test_final$V21, final_predict)
ggroc(final_ROC) + theme_dark() + ggtitle('ROC')
print(paste('AUC: ', auc(ROC)))
final_predict <- ifelse(final_predict > 0.8, 2, 1)
confusionMatrix(as.factor(final_predict), as.factor(test_final$V21), positive = '1')
train_final <- train[, c(1,2,3,4,6,7,9,14,20,21)]
test_final <- test[, c(1,2,3,4,6,7,9,14,20,21)]
final_model <- glm(V21 ~., family = binomial(link='logit'), data = train_final)
final_predict <- predict(final_model, newdata = test_final, type ='response')
final_ROC <- roc(test_final$V21, final_predict)
ggroc(final_ROC) + theme_dark() + ggtitle('ROC')
print(paste('AUC: ', auc(ROC)))
final_predict <- ifelse(final_predict > 0.8, 2, 1)
confusionMatrix(as.factor(final_predict), as.factor(test_final$V21), positive = '2')
test_final$V21
where(test_final$V21, 1)
test$V21 == 1
lenght(test$V21 == 1)
length(test$V21 == 1)
length(test$V21[test$V21 == 1])
length(test$V21[test$V21 == 2])
train_final <- train[, c(1,2,3,4,6,7,9,14,20,21)]
test_final <- test[, c(1,2,3,4,6,7,9,14,20,21)]
final_model <- glm(V21 ~., family = binomial(link='logit'), data = train_final)
final_predict <- predict(final_model, newdata = test_final, type ='response')
final_ROC <- roc(test_final$V21, final_predict)
ggroc(final_ROC) + theme_dark() + ggtitle('ROC')
print(paste('AUC: ', auc(ROC)))
final_predict <- ifelse(final_predict > 0.4, 2, 1)
confusionMatrix(as.factor(final_predict), as.factor(test_final$V21), positive = '2')
train_final <- train[, c(1,2,3,4,6,7,9,14,20,21)]
test_final <- test[, c(1,2,3,4,6,7,9,14,20,21)]
final_model <- glm(V21 ~., family = binomial(link='logit'), data = train_final)
final_predict <- predict(final_model, newdata = test_final, type ='response')
final_ROC <- roc(test_final$V21, final_predict)
ggroc(final_ROC) + theme_dark() + ggtitle('ROC')
print(paste('AUC: ', auc(ROC)))
final_predict <- ifelse(final_predict > 0.3, 2, 1)
confusionMatrix(as.factor(final_predict), as.factor(test_final$V21), positive = '2')
train_final <- train[, c(1,2,3,4,6,7,9,14,20,21)]
test_final <- test[, c(1,2,3,4,6,7,9,14,20,21)]
final_model <- glm(V21 ~., family = binomial(link='logit'), data = train_final)
final_predict <- predict(final_model, newdata = test_final, type ='response')
final_ROC <- roc(test_final$V21, final_predict)
ggroc(final_ROC) + theme_dark() + ggtitle('ROC')
print(paste('AUC: ', auc(ROC)))
final_predict <- ifelse(final_predict > 0.2, 2, 1)
confusionMatrix(as.factor(final_predict), as.factor(test_final$V21), positive = '2')
train_final <- train[, c(1,2,3,4,6,7,9,14,20,21)]
test_final <- test[, c(1,2,3,4,6,7,9,14,20,21)]
final_model <- glm(V21 ~., family = binomial(link='logit'), data = train_final)
final_predict <- predict(final_model, newdata = test_final, type ='response')
final_ROC <- roc(test_final$V21, final_predict)
ggroc(final_ROC) + theme_dark() + ggtitle('ROC')
print(paste('AUC: ', auc(ROC)))
final_predict <- ifelse(final_predict > 0.1, 2, 1)
confusionMatrix(as.factor(final_predict), as.factor(test_final$V21), positive = '2')
train_final <- train[, c(1,2,3,4,6,7,9,14,20,21)]
test_final <- test[, c(1,2,3,4,6,7,9,14,20,21)]
final_model <- glm(V21 ~., family = binomial(link='logit'), data = train_final)
final_predict <- predict(final_model, newdata = test_final, type ='response')
final_ROC <- roc(test_final$V21, final_predict)
ggroc(final_ROC) + theme_dark() + ggtitle('ROC')
print(paste('AUC: ', auc(ROC)))
final_predict <- ifelse(final_predict > 0.5, 2, 1)
confusionMatrix(as.factor(final_predict), as.factor(test_final$V21), positive = '2')
train_final <- train[, c(1,2,3,4,6,7,9,14,20,21)]
test_final <- test[, c(1,2,3,4,6,7,9,14,20,21)]
final_model <- glm(V21 ~., family = binomial(link='logit'), data = train_final)
final_predict <- predict(final_model, newdata = test_final, type ='response')
final_ROC <- roc(test_final$V21, final_predict)
ggroc(final_ROC) + theme_dark() + ggtitle('ROC')
print(paste('AUC: ', auc(ROC)))
final_predict <- ifelse(final_predict > 0.3, 2, 1)
confusionMatrix(as.factor(final_predict), as.factor(test_final$V21), positive = '2')
train_final <- train[, c(1,2,3,4,6,7,9,14,20,21)]
test_final <- test[, c(1,2,3,4,6,7,9,14,20,21)]
final_model <- glm(V21 ~., family = binomial(link='logit'), data = train_final)
final_predict <- predict(final_model, newdata = test_final, type ='response')
final_ROC <- roc(test_final$V21, final_predict)
ggroc(final_ROC) + theme_dark() + ggtitle('ROC')
print(paste('AUC: ', auc(ROC)))
final_predict <- ifelse(final_predict > 0.3, 1, 2)
confusionMatrix(as.factor(final_predict), as.factor(test_final$V21), positive = '2')
train_final <- train[, c(1,2,3,4,6,7,9,14,20,21)]
test_final <- test[, c(1,2,3,4,6,7,9,14,20,21)]
final_model <- glm(V21 ~., family = binomial(link='logit'), data = train_final)
final_predict <- predict(final_model, newdata = test_final, type ='response')
final_ROC <- roc(test_final$V21, final_predict)
ggroc(final_ROC) + theme_dark() + ggtitle('ROC')
print(paste('AUC: ', auc(ROC)))
final_predict <- ifelse(final_predict > 0.25, 2, 1)
confusionMatrix(as.factor(final_predict), as.factor(test_final$V21), positive = '2')
test_predict <- predict(gc_model, newdata = test[,1:20], type ='response')
ROC <- roc(test$V21, test_predict)
ggroc(ROC) + theme_dark() + ggtitle('ROC')
print(paste('AUC: ', auc(ROC)))
test_predict <- ifelse(test_predict > 0.3, 2, 1)
confusionMatrix(as.factor(test_predict), as.factor(test$V21), positive = '2')
test_predict <- predict(gc_model, newdata = test[,1:20], type ='response')
ROC <- roc(test$V21, test_predict)
ggroc(ROC) + theme_dark() + ggtitle('ROC')
print(paste('AUC: ', auc(ROC)))
test_predict <- ifelse(test_predict > 0.25, 2, 1)
confusionMatrix(as.factor(test_predict), as.factor(test$V21), positive = '2')
test_predict <- predict(gc_model, newdata = test[,1:20], type ='response')
ROC <- roc(test$V21, test_predict)
ggroc(ROC) + theme_dark() + ggtitle('ROC')
print(paste('AUC: ', auc(ROC)))
test_predict <- ifelse(test_predict > 0.20, 2, 1)
confusionMatrix(as.factor(test_predict), as.factor(test$V21), positive = '2')
final_model$coefficients
train_final <- train[, c(1,2,3,4,6,7,9,14,20,21)]
test_final <- test[, c(1,2,3,4,6,7,9,14,20,21)]
final_model <- glm(V21 ~., family = binomial(link='logit'), data = train_final)
final_predict <- predict(final_model, newdata = test_final, type ='response')
final_predict <- ifelse(final_predict > 0.25, 2, 1)
final_ROC <- roc(test_final$V21, final_predict)
ggroc(final_ROC) + theme_dark() + ggtitle('ROC')
print(paste('AUC: ', auc(ROC)))
confusionMatrix(as.factor(final_predict), as.factor(test_final$V21), positive = '2')
train_final <- train[, c(1,2,3,4,6,7,9,14,20,21)]
test_final <- test[, c(1,2,3,4,6,7,9,14,20,21)]
final_model <- glm(V21 ~., family = binomial(link='logit'), data = train_final)
final_predict <- predict(final_model, newdata = test_final, type ='response')
final_predict <- ifelse(final_predict > 0.40, 2, 1)
final_ROC <- roc(test_final$V21, final_predict)
ggroc(final_ROC) + theme_dark() + ggtitle('ROC')
print(paste('AUC: ', auc(ROC)))
confusionMatrix(as.factor(final_predict), as.factor(test_final$V21), positive = '2')
test_predict <- predict(gc_model, newdata = test[,1:20], type ='response')
test_predict <- ifelse(test_predict > 0.20, 2, 1)
ROC <- roc(test$V21, test_predict)
ggroc(ROC) + theme_dark() + ggtitle('ROC')
print(paste('AUC: ', auc(ROC)))
confusionMatrix(as.factor(test_predict), as.factor(test$V21), positive = '2')
test_predict <- predict(gc_model, newdata = test[,1:20], type ='response')
test_predict <- ifelse(test_predict > 0.5, 2, 1)
ROC <- roc(test$V21, test_predict)
ggroc(ROC) + theme_dark() + ggtitle('ROC')
print(paste('AUC: ', auc(ROC)))
confusionMatrix(as.factor(test_predict), as.factor(test$V21), positive = '2')
train_final <- train[, c(1,2,3,4,6,7,9,14,20,21)]
test_final <- test[, c(1,2,3,4,6,7,9,14,20,21)]
final_model <- glm(V21 ~., family = binomial(link='logit'), data = train_final)
final_predict <- predict(final_model, newdata = test_final, type ='response')
final_predict <- ifelse(final_predict > 0.30, 2, 1)
final_ROC <- roc(test_final$V21, final_predict)
ggroc(final_ROC) + theme_dark() + ggtitle('ROC')
print(paste('AUC: ', auc(ROC)))
confusionMatrix(as.factor(final_predict), as.factor(test_final$V21), positive = '2')
train_final <- train[, c(1,2,3,4,6,7,9,14,20,21)]
test_final <- test[, c(1,2,3,4,6,7,9,14,20,21)]
final_model <- glm(V21 ~., family = binomial(link='logit'), data = train_final)
final_predict <- predict(final_model, newdata = test_final, type ='response')
final_predict <- ifelse(final_predict > 0.45, 2, 1)
final_ROC <- roc(test_final$V21, final_predict)
ggroc(final_ROC) + theme_dark() + ggtitle('ROC')
print(paste('AUC: ', auc(ROC)))
confusionMatrix(as.factor(final_predict), as.factor(test_final$V21), positive = '2')
train_final <- train[, c(1,2,3,4,6,7,9,14,20,21)]
test_final <- test[, c(1,2,3,4,6,7,9,14,20,21)]
final_model <- glm(V21 ~., family = binomial(link='logit'), data = train_final)
final_predict <- predict(final_model, newdata = test_final, type ='response')
final_predict <- ifelse(final_predict > 0.4, 2, 1)
final_ROC <- roc(test_final$V21, final_predict)
ggroc(final_ROC) + theme_dark() + ggtitle('ROC')
print(paste('AUC: ', auc(ROC)))
confusionMatrix(as.factor(final_predict), as.factor(test_final$V21), positive = '2')
train_final <- train[, c(1,2,3,4,6,7,9,14,20,21)]
test_final <- test[, c(1,2,3,4,6,7,9,14,20,21)]
final_model <- glm(V21 ~., family = binomial(link='logit'), data = train_final)
final_predict <- predict(final_model, newdata = test_final, type ='response')
final_predict <- ifelse(final_predict > 0.2, 2, 1)
final_ROC <- roc(test_final$V21, final_predict)
ggroc(final_ROC) + theme_dark() + ggtitle('ROC')
print(paste('AUC: ', auc(ROC)))
confusionMatrix(as.factor(final_predict), as.factor(test_final$V21), positive = '2')
train_final <- train[, c(1,2,3,4,6,7,9,14,20,21)]
test_final <- test[, c(1,2,3,4,6,7,9,14,20,21)]
final_model <- glm(V21 ~., family = binomial(link='logit'), data = train_final)
final_predict <- predict(final_model, newdata = test_final, type ='response')
final_predict <- ifelse(final_predict > 0.40, 2, 1)
final_ROC <- roc(test_final$V21, final_predict)
ggroc(final_ROC) + theme_dark() + ggtitle('ROC')
print(paste('AUC: ', auc(ROC)))
confusionMatrix(as.factor(final_predict), as.factor(test_final$V21), positive = '2')
test_predict <- predict(gc_model, newdata = test[,1:20], type ='response')
ROC <- roc(test$V21, test_predict)
ggroc(ROC) + theme_dark() + ggtitle('ROC')
print(paste('AUC: ', auc(ROC)))
test_predict <- ifelse(test_predict > 0.20, 2, 1)
confusionMatrix(as.factor(test_predict), as.factor(test$V21), positive = '2')
train_final <- train[, c(1,2,3,4,6,7,9,14,20,21)]
test_final <- test[, c(1,2,3,4,6,7,9,14,20,21)]
final_model <- glm(V21 ~., family = binomial(link='logit'), data = train_final)
final_predict <- predict(final_model, newdata = test_final, type ='response')
final_ROC <- roc(test_final$V21, final_predict)
ggroc(final_ROC) + theme_dark() + ggtitle('ROC')
print(paste('AUC: ', auc(ROC)))
final_predict <- ifelse(final_predict > 0.25, 2, 1)
confusionMatrix(as.factor(final_predict), as.factor(test_final$V21), positive = '2')
train_final <- train[, c(1,2,3,4,6,7,9,14,20,21)]
test_final <- test[, c(1,2,3,4,6,7,9,14,20,21)]
final_model <- glm(V21 ~., family = binomial(link='logit'), data = train_final)
final_predict <- predict(final_model, newdata = test_final, type ='response')
final_ROC <- roc(test_final$V21, final_predict)
ggroc(final_ROC) + theme_dark() + ggtitle('ROC')
print(paste('AUC: ', auc(ROC)))
final_predict <- ifelse(final_predict > 0.1, 2, 1)
confusionMatrix(as.factor(final_predict), as.factor(test_final$V21), positive = '2')
train_final <- train[, c(1,2,3,4,6,7,9,14,20,21)]
test_final <- test[, c(1,2,3,4,6,7,9,14,20,21)]
final_model <- glm(V21 ~., family = binomial(link='logit'), data = train_final)
final_predict <- predict(final_model, newdata = test_final, type ='response')
final_ROC <- roc(test_final$V21, final_predict)
ggroc(final_ROC) + theme_dark() + ggtitle('ROC')
print(paste('AUC: ', auc(ROC)))
final_predict <- ifelse(final_predict > 0.15, 2, 1)
confusionMatrix(as.factor(final_predict), as.factor(test_final$V21), positive = '2')
coeff = gc_model$coefficients
length(coeff)
coeff = gc_model$coefficients
coeff
coef = gc_model$coefficients
coef$V1A12
coef = as.matrix(gc_model$coefficients)
coef
coef = as.matrix(gc_model$coefficients)
coef$V1A12
coef = as.matrix(gc_model$coefficients)
coef[1]
coef = as.matrix(gc_model$coefficients)
coef[1]
coef = as.matrix(gc_model$coefficients)
coef.columns
coef = as.matrix(gc_model$coefficients)
coef
cm <- confusionMatrix(as.factor(test_predict), as.factor(test$V21), positive = '2')
cm <- confusionMatrix(as.factor(test_predict), as.factor(test$V21), positive = '2')
cm$table
h2o.shutdown(prompt = FALSE)
install.packages("FrF2")
setwd("~/Analytics Modeling/HW9")
require(FrF2)
require(FrF2)
require(FrF2)
pseudo.design <- FrF2(nruns = 16, nfactors = 10)
kable(pseudo.desing)
require(FrF2)
pseudo.design <- FrF2(nruns = 16, nfactors = 10)
table(pseudo.desing)
require(FrF2)
pseudo.design <- FrF2(nruns = 16, nfactors = 10)
table(pseudo.design)
require(FrF2)
pseudo.design <- FrF2(nruns = 16, nfactors = 10)
kable(pseudo.design)
require(FrF2)
pseudo.design <- FrF2(nruns = 16, nfactors = 10)
pseudo.design
pseudo.design <- FrF2(nruns = 16, nfactors = 10, factor.names = c('swimming pool', 'hot tub', 'yard','community features' ,'central air', 'natural gas', 'sprinkler system', 'google fiber', 'basement', 'office'))
pseudo.design
